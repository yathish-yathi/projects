spring.application.name=landValuePredictor

spring.datasource.url=jdbc:mysql://localhost:3306/landValue_Predictor_data
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true 
spring.jpa.properties.hibernate.show_sql=true

map.api=1234

#10km on google map
coordinate.lat=0.0924214418
coordinate.lng=0.0900900901

#Value point considered in this Model (should be from google map Doc : https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
#Format PlaceType-radius(km), Radius must be between 0 to 50 km
value.points.include=school-10,hospital-15,university-20,train_station-20,airport-50,bus_stop-1,international_airport-50

value.point.range.school=10
value.point.range.hospital=15
value.point.range.university=20
value.point.range.train_station=20
value.point.range.airport=50
value.point.range.bus_stop=1
value.point.range.international_airport=50

#Maximum value points considered for each point 
value.points.maxResultCount=10

mapApi.apiKey=AIzaSyBMBDygDQCrAa0_iaXqZsYV75CXqniVeOA
mapApi.getNearbyPlaces.headers.FieldMask=places.displayName,places.location,places.id

#Minimun area of land accepted 
land.area.cents.minmum=5


#Here add only first and last points because we want 1 for 5 cents and 0.3 for 1000cents , if we add more points in between it will alter the slop
price.multiplier.cents.5=1
price.multiplier.cents.1000=0.3